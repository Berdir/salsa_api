<?php
/**
 * @file
 * Provides an API to allow Drupal to query Salsa/Demoncracy in Action
 *
 * This module does not provide any visible functionality on its own, it just
 * provides an API that other modules can use to query data in salsa.
 *
 * This is a HIGHLY EXPERIMENTAL and unofficial Drupal 7 version! Use at your own risk!
 */

/**
 * Implements hook_permission().
 */
function salsa_api_permission() {
  return array(
    'administer salsa api' => array(
      'title' => t('Administer Salsa API'),
      'description' => t('Enter or change the login information used to connect to Salsa'),
    ),
  );
}

/**
 * Implements hook_sytem_settings().
 */
function salsa_api_system_settings($form, &$form_state) {
  //$form = array();
  $form['salsa_api_url'] = array(
    '#type' => 'textfield',
    '#title' => t('URL to Salsa API'),
    '#description' => t('Type the URL to the Salsa API that your organizations node is on. ex: https://hq-org2.democracyinaction.org'),
    '#default_value' => variable_get('salsa_api_url', NULL),
    '#size' => 50,
  );
  $form['salsa_api_username'] = array(
    '#type' => 'textfield',
    '#title' => t('Campaign Manager Username'),
    '#description' => t('Type the username of the Campaign Manager that you are using to login to the Salsa interface.'),
    '#default_value' => variable_get('salsa_api_username', NULL),
    '#size' => 50,
  );
  $form['salsa_api_password'] = array(
    '#type' => 'textfield',
    '#title' => t('Campaign Manager Password'),
    '#description' => t('Type the password of the Campaign Manager that you entered above.'),
    '#default_value' => variable_get('salsa_api_password', NULL),
    '#size' => 50,
  );
  $form['salsa_api_curlopt_timeout'] = array(
    '#type' => 'textfield',
    '#title' => t('Query Timeout'),
    '#description' => t('Number of seconds before a Salsa API query times out'),
    '#default_value' => variable_get('salsa_api_curlopt_timeout', 10),
    '#size' => 4,
  );
  return system_settings_form($form);
}

/**
 * Implements hook_menu().
 */
function salsa_api_menu() {
  $items = array();
  $items['admin/config/services/salsa'] = array(
    'title' => 'Salsa',
    'description' => 'Manage and configure the Salsa integration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('salsa_api_system_settings'),
    'access arguments' => array('access administration pages'),
  );
  $items['admin/config/services/salsa/api'] = array(
    'title' => 'API settings',
    'access arguments' => array('administer salsa api'),
    'description' => 'Authentication and API related settings for the Salsa API',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  return $items;
}

/**
 * Create an array with the user connection information.
 *
 * @return array user_connect
 *   An array with the connection information.
 */
function salsa_api_user_connect() {
  $user_connect = array();
  $user_connect['url'] = variable_get('salsa_api_url', NULL);
  $user_connect['username'] = variable_get('salsa_api_username', NULL);
  $user_connect['password'] = variable_get('salsa_api_password', NULL);
  return $user_connect;
}

/**
 * Setup and open a connection using cURL.
 *
 * @param $user_connect
 *   Array containing connection information, see salsa_api_user_connect().
 *
 * @return
 *   The configured cURL object.
 */
function salsa_api_curl_connect($user_connect) {
  $temp_dir = file_directory_temp();
  $connection = curl_init();
  curl_setopt($connection, CURLOPT_POST, 1);
  curl_setopt($connection, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($connection, CURLOPT_CONNECTTIMEOUT, 10);
  curl_setopt($connection, CURLOPT_TIMEOUT, variable_get('salsa_api_curlopt_timeout', 10));
  curl_setopt($connection, CURLOPT_COOKIESESSION, TRUE);
  //Development: on windows dev server the certificate check fails, so we
  //disable the check.
  curl_setopt($connection, CURLOPT_SSL_VERIFYPEER, 0);

  curl_setopt($connection, CURLOPT_COOKIEFILE, '/' . $temp_dir . '/cookies_file');
  curl_setopt($connection, CURLOPT_COOKIEJAR, '/' . $temp_dir . '/cookies_file');
  curl_setopt($connection, CURLOPT_URL, $user_connect['url'] . "/api/authenticate.sjs");
  curl_setopt($connection, CURLOPT_POSTFIELDS, "email=" . $user_connect['username'] . "&password=" . $user_connect['password']);
  $auth = curl_exec($connection);
  $response = simplexml_load_string($auth);
  if ((string) $response->message == 'Successful Login') {
    return $connection;
  }
  else {
    drupal_set_message(t('Connection to Salsa failed. (@message)', array('@message' => (string) $response->error)), 'error', FALSE);
    watchdog('salsa', '%url/api/authenticate.sjs?email=**&password=** call result: %reply', array('%url' => $url, '%reply' => $auth), WATCHDOG_ERROR);
  }

  // Connection failed, close connection.
  salsa_api_curl_disconnect($connection);
  return NULL;
}

/**
 * Close an existing cURL connection.
 *
 * @param string $connection
 *   The current cURL object that we want to disconnect from.
 */
function salsa_api_curl_disconnect($connection) {
  curl_close($connection);
}

/**
 * Run a query against salsa using cURL
 *
 * @param array $curl_query
 *   An array containing the script and a formatted query.
 *
 * @return string
 *   The raw result of the cURL query.
 */
function salsa_api_curl_query($curl_query) {
  $user_connect = salsa_api_user_connect();
  $connection = salsa_api_curl_connect($user_connect);
  if ($connection) {
    curl_setopt($connection, CURLOPT_URL, $user_connect['url'] . $curl_query['#script']);
    curl_setopt($connection, CURLOPT_POSTFIELDS, $curl_query['#query']);
    $curl_query_result = curl_exec($connection);
    if ($error = curl_error($connection)) {
      drupal_set_message(t('Query to Salsa failed. (@message)', array('@message' => (string) $error)), 'error', FALSE);
    }
    else {
      return $curl_query_result;
    }
    salsa_api_curl_disconnect($connection);
  }
}

/**
 * Build and then run a query against the DIA/Salsa database.
 *
 * @param query_info
 * The query information (array) that needs to be built and then run.
 * The query builder expects an array that looks like this (not all values are
 * required):
 * query_info = array(
 *  '#script' => '',
 *  '#tables' => '',
 *  '#condition' => '',
 *  '#limit' => '',
 *  '#fields' => '',
 *  '#order' => '',
 *  '#group' => '',
 *  '#links' => ''
 * );
 *
 * @return array
 *   An array of the result returned from Salsa.
 */
function salsa_api_query($query_info) {
  //dpm($query_info, "salsa_api query");

  $script = '/api/' . $query_info['#script'];
  switch ($query_info['#script']) {
    case 'getLeftJoin.sjs':
      if (isset($query_info['#tables'])) {
        $build_query_array['object'] = $query_info['#tables'];
      }
      if (isset($query_info['#condition'])) {
        $build_query_array['condition'] = $query_info['#condition'];
      }
      if (isset($query_info['#limit'])) {
        $build_query_array['limit'] = $query_info['#limit'];
      }
      if (isset($query_info['#fields'])) {
        $build_query_array['include'] = $query_info['#fields'];
      }
      if (isset($query_info['#order'])) {
        $build_query_array['orderBy'] = $query_info['#order'];
      }
      if (isset($query_info['#group'])) {
        $build_query_array['groupBy'] = $query_info['#group'];
      }
      foreach ($build_query_array as $item => $value) {
        if (is_array($value)) {
          foreach ($value as $i => $v) {
            $query .= $item . '=' . $v . '&';
          }
        }
        else {
          $query .= $item . '=' . $value . '&';
        }
      }
      break;
    case 'getObject.sjs':
      $build_query_array['object'] = $query_info['#tables'];
      $build_query_array['key'] = $query_info['#fields'];
      foreach ($build_query_array as $item => $value) {
        if (is_array($value)) {
          foreach ($value as $i => $v) {
            $query .= $item . '=' . $v . '&';
          }
        }
        else {
          $query .= $item . '=' . $value . '&';
        }
      }
      break;
    case 'getObjects.sjs':
      $build_query_array['object'] = $query_info['#tables'];
      if (isset($query_info['#condition'])) {
        $build_query_array['condition'] = $query_info['#condition'];
      }
      if (isset($query_info['#limit'])) {
        $build_query_array['limit'] = $query_info['#limit'];
      }
      if (isset($query_info['#fields'])) {
        $build_query_array['include'] = $query_info['#fields'];
      }
      if (isset($query_info['#order'])) {
        $build_query_array['orderBy'] = $query_info['#order'];
      }
      if (isset($query_info['#group'])) {
        $build_query_array['groupBy'] = $query_info['#group'];
      }
      $query = "";
      foreach ($build_query_array as $item => $value) {
        if (is_array($value)) {
          foreach ($value as $i => $v) {
            $query .= $item . '=' . $v . '&';
          }
        }
        else {
          $query .= $item . '=' . $value . '&';
        }
      }
      break;
    case 'getCount.sjs':
      $build_query_array['object'] = $query_info['#tables'];
      if ($query_info['#condition']) {
        $build_query_array['condition'] = $query_info['#condition'];
      }
      $build_query_array['countColumn'] = $query_info['#fields'];
      foreach ($build_query_array as $item => $value) {
        if (is_array($value)) {
          foreach ($value as $i => $v) {
            $query .= $item . '=' . $v . '&';
          }
        }
        else {
          $query .= $item . '=' . $value . '&';
        }
      }
      break;
    case 'getCounts.sjs':
      $build_query_array['object'] = $query_info['#tables'];
      if (isset($query_info['#condition'])) {
        $build_query_array['condition'] = $query_info['#condition'];
      }
      if (isset($query_info['#limit'])) {
        $build_query_array['limit'] = $query_info['#limit'];
      }
      if (isset($query_info['#order'])) {
        $build_query_array['orderBy'] = $query_info['#order'];
      }
      if (isset($query_info['#group'])) {
        $build_query_array['groupBy'] = $query_info['#group'];
      }
      $build_query_array['countColumn'] = $query_info['#fields'];
      foreach ($build_query_array as $item => $value) {
        if (is_array($value)) {
          foreach ($value as $i => $v) {
            $query .= $item . '=' . $v . '&';
          }
        }
        else {
          $query .= $item . '=' . $value . '&';
        }
      }
      break;
    case 'getReport.sjs':
      $script = '/api/' . $query_info['#script'];
      $query = 'report_KEY=' . $query_info['#fields'];
      break;
    case 'save':
      $script = '/' . $query_info['#script'];
      $query = 'xml&';
      $build_query_array['object'] = $query_info['#tables'];
      $build_query_array['fields'] = $query_info['#fields'];
      if (isset($query_info['#links'])) {
        $build_query_array['links'] = $query_info['#links'];
      }
      foreach ($build_query_array as $item => $value) {
        if (is_array($value)) {
          if ($item == 'links') {
            foreach ($value as $table => $links) {
              foreach ($links as $key) {
                $query .= 'link=' . $table . '&linkKey=' . $key . '&';
              }
            }
          }
          else {
            foreach ($value as $i => $v) {
              $query .= $i . '=' . $v . '&';
            }
          }
        }
        else {
          $query .= $item . '=' . $value . '&';
        }
      }
      break;
    case 'delete':
      $query = 'xml&';
      $build_query_array['object'] = $query_info['#tables'];
      $build_query_array['key'] = $query_info['#fields'];
      foreach ($build_query_array as $item => $value) {
        if (is_array($value)) {
          foreach ($value as $i => $v) {
            $query .= $item . '=' . $v . '&';
          }
        }
        else {
          $query .= $item . '=' . $value . '&';
        }
      }
      break;
    case 'copy':
      $query = 'xml&';
      $build_query_array['object'] = $query_info['#tables'];
      $build_query_array['key'] = $query_info['#fields'];
      foreach ($build_query_array as $item => $value) {
        if (is_array($value)) {
          foreach ($value as $i => $v) {
            $query .= $item . '=' . $v . '&';
          }
        }
        else {
          $query .= $item . '=' . $value . '&';
        }
      }
      break;
    case 'email':
      // to-do
      break;
  }
  $query_result = salsa_api_curl_query(array('#script' => $script, '#query' => $query));
  if (preg_match("<div class='sjs error'>", $query_result)) {
    drupal_set_message(t('Salsa Error Message: @error', array('@error' => strip_tags($query_result))), 'error');
    return NULL;
  }
  else {
    $query_result = salsa_api_object2array(simplexml_load_string($query_result));
  }
  return $query_result;
}

/**
 * Convert an XML object into an array. Some XML KEYs returned from Salsa have
 * an "-" in them which makes navigating through an XML object difficult!
 *
 * @param $object
 *  The xml object that needs to be converted into an array.
 *
 * @return array
 *   An array containing the converted xml object.
 */
function salsa_api_object2array($object) {
  $return = NULL;
  if (is_array($object)) {
    foreach ($object as $key => $value) {
      $return[$key] = salsa_api_object2array($value);
    }
  }
  elseif (is_object($object)) {
    $var = get_object_vars($object);
    if ($var) {
      foreach ($var as $key => $value) {
        $return[$key] = ($key && !$value) ? NULL : salsa_api_object2array($value);
      }
    }
    else {
      return $object;
    }
  }
  else {
    return $object;
  }
  return $return;
}
